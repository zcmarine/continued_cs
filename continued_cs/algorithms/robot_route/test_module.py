import logging

import pytest

from continued_cs.algorithms import robot_route as rr


logger = logging.getLogger('continued_cs.algorithms.robot_route')
logger.setLevel(logging.DEBUG)


def test_create_empty_matrix():
    empty_matrix = rr.KnownRoutes(rows=2, cols=4)
    assert len(empty_matrix.matrix) == 2
    assert len(empty_matrix.matrix[0]) == 4


@pytest.mark.parametrize('cell, rows, cols, expected', [
    (rr.Cell(0, 0), 1, 1, []),
    (rr.Cell(0, 0), 2, 1, [rr.Cell(1, 0)]),
    (rr.Cell(0, 0), 1, 2, [rr.Cell(0, 1)]),
    (rr.Cell(0, 0), 2, 2, [rr.Cell(1, 0), rr.Cell(0, 1)]),
])
def test_get_adjoining_cells(cell, rows, cols, expected):
    actual = rr.get_adjoining_cells(cell, rows, cols)
    for i, expected_cell in enumerate(expected):
        actual_cell = actual[i]
        assert actual_cell.row == expected_cell.row
        assert actual_cell.col == expected_cell.col


@pytest.mark.parametrize('fn', (rr.find_route, rr.find_route_alt))
def test_find_route_1x1(fn):
    matrix = [[0]]
    assert fn(matrix) == [(0, 0)]


@pytest.mark.parametrize('fn', (rr.find_route, rr.find_route_alt))
def test_find_route_1x2(fn):
    matrix = [[0, 0]]
    assert fn(matrix) == [(0, 0), (0, 1)]


@pytest.mark.parametrize('fn', (rr.find_route, rr.find_route_alt))
def test_find_route_2x1(fn):
    matrix = [[0],
              [0]]
    assert fn(matrix) == [(0, 0), (1, 0)]


@pytest.mark.parametrize('fn', (rr.find_route, rr.find_route_alt))
def test_find_route_3x3(fn):
    matrix = [[0, 1, 0],
              [0, 0, 0],
              [1, 1, 0]]
    assert fn(matrix) == [(0, 0), (1, 0), (1, 1), (1, 2), (2, 2)]


@pytest.mark.parametrize('fn', (rr.find_route, rr.find_route_alt))
def test_find_route_bigger(fn):
    matrix = [[0, 0, 1, 1, 1, 1, 1],
              [1, 0, 0, 0, 1, 1, 1],
              [1, 1, 1, 0, 1, 1, 1],
              [1, 1, 1, 0, 1, 1, 1],
              [1, 1, 1, 0, 1, 1, 1],
              [1, 1, 1, 0, 0, 1, 1],
              [1, 1, 1, 1, 0, 1, 1],
              [0, 0, 0, 0, 0, 0, 0]]

    expected = [(0, 0), (0, 1), (1, 1), (1, 2), (1, 3), (2, 3), (3, 3), (4, 3), (5, 3), (5, 4),
                (6, 4), (7, 4), (7, 5), (7, 6)]
    assert fn(matrix) == expected


@pytest.mark.parametrize('fn', (rr.find_route, rr.find_route_alt))
def test_find_route_even_bigger(fn):
    matrix = [
        [0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1],
        [0, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1],
        [0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1],
        [0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1],
        [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0]]

    # Generated by asserting something false and then verifying the debug
    # statement's "Route to bottom right cell" output
    expected = [(0, 0), (0, 1), (0, 2), (1, 2), (2, 2), (3, 2), (4, 2), (4, 3), (4, 4), (5, 4),
                (6, 4), (6, 5), (7, 5), (7, 6), (8, 6), (9, 6), (10, 6), (10, 7), (10, 8),
                (10, 9), (11, 9), (12, 9), (13, 9), (13, 10), (14, 10), (14, 11)]
    assert fn(matrix) == expected
